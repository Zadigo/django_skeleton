from typing import Dict, Generic, Optional, Type, TypeVar, Union

from django_skeleton.db.models import Model
from django_skeleton.db.models.query import QuerySet

T = TypeVar('T', bound=Model, covariant=True)


class BaseManager(Generic[T]):
    name: str = ...
    model: Type = ...
    _db: Optional[str]
    def __init__(self) -> None: ...
    @classmethod
    def get_queryset_methods(cls, queryset_class: QuerySet) -> Dict: ...
    def get_queryset(self) -> BaseManager: ...
    def all(self) -> QuerySet: ...
    def count(self) -> int: ...
    def get(self, **kwargs) -> QuerySet: ...
    def filter(self, *args, **kwargs) -> QuerySet: ...


class Manager(BaseManager):
    ...


class ManagerDescriptor:
    def __init__(self, manager: Manager) -> None: ...

    def __get__(self, instance: Model,
                cls: Optional[Type[Model]] = None) -> Manager: ...
